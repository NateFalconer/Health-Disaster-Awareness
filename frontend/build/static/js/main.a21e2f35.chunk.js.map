{"version":3,"sources":["services/index.js","components/home/Home.js","components/404/NotFound.js","components/auth/SignUp.js","components/auth/LogIn.js","components/profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","service","axios","create","withCredentials","actions","isLoggedIn","a","get","signUp","user","post","logIn","logOut","Home","Component","NotFound","SignUp","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","then","props","setUser","data","catch","response","console","error","onSubmit","this","type","onChange","LogIn","Profile","email","history","push","App","createdAt","updatedAt","_id","log","to","onClick","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a21e2f35.chunk.js","sourcesContent":["import axios from 'axios';\nlet baseURL;\n\nprocess.env.NODE_ENV === 'production'\n  //? (baseURL = 'here should be your production endpoint')\n  ? (baseURL = 'https://outbreakprojectih.herokuapp.com')\n  : (baseURL = 'http://localhost:5000');\n\nconst service = axios.create({ withCredentials: true, baseURL });\n\nconst actions = {\n  isLoggedIn: async () => {\n    return await service.get('/is-logged-in')\n  },\n  signUp: async (user) => {\n    return await service.post('/signup', user)\n  },\n  logIn: async (user) => {\n    return await service.post('/login', user)\n  },\n  logOut: async () => {\n    return await service.get('/logout')\n  }\n};\n\nexport default actions;\n","import React, { Component } from 'react';\nimport actions from '../../services/index'\n\n\nclass Home extends Component {\n  async componentDidMount() {\n    //actions.test()\n  }\n  render() {\n    return (\n      <div>\n        \n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div>\n      <h2>Not found</h2>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { Component, Fragment } from 'react';\nimport actions from '../../services/index'\n\nclass SignUp extends Component {\n    state = {\n\n    } \n    handleChange = e => this.setState({[e.target.name]: e.target.value})\n\n    handleSubmit =  e => {\n        e.preventDefault()\n            actions.signUp(this.state).then(user=> {\n                this.props.setUser({...user.data})  \n            }).catch(({ response }) => console.error(response.data));\n    }\n    render() {\n        return (\n            <Fragment>\n                <h2>SignUP</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <input name=\"email\" type=\"email\" onChange={this.handleChange} />\n                    <input name=\"password\" type=\"password\" onChange={this.handleChange} />\n                    <input type=\"submit\" value=\"Sign Up\"/>\n                </form>\n            </Fragment>\n        );\n    }\n}\n\nexport default SignUp;","import React, { Component, Fragment } from 'react';\nimport actions from '../../services/index'\n\nclass LogIn extends Component {\n\n    state = {\n\n    } \n    handleChange = e => this.setState({[e.target.name]: e.target.value})\n\n    handleSubmit = e => {\n        e.preventDefault()\n         actions.logIn(this.state).then(user => {\n            this.props.setUser({...user.data})  \n        }).catch(({ response }) => console.error(response.data));\n    }\n    render() {\n        return (\n            <Fragment>\n                <h2>LogIn</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <input name=\"email\" type=\"email\" onChange={this.handleChange} />\n                    <input name=\"password\" type=\"password\" onChange={this.handleChange} />\n                    <input type=\"submit\" value=\"Log In\"/>\n                </form>\n            </Fragment>\n        );\n    }\n}\n\nexport default LogIn;","import React, { Component } from 'react';\n\nconst Profile = (props) => {\n    if(!props.user.email){ \n        props.history.push('/log-in') \n    }   \n    return (\n        <div>\n            Profile\n            Welcome {props.user.email} !!! \n        </div>\n    );\n}\n\nexport default Profile;","import React, {Component, Fragment} from 'react';\nimport { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport NotFound from './components/404/NotFound.js';\nimport SignUp from './components/auth/SignUp';\nimport LogIn from './components/auth/LogIn';\nimport Profile from './components/profile/Profile'\nimport actions from './services/index'\n\nclass App extends Component {\n  \n  state = { }\n  \n  async componentDidMount() {\n    let user = await actions.isLoggedIn()\n    this.setState({...user.data})\n    console.log('coolest ')\n\n  }\n\n  setUser = (user) => this.setState(user)\n  \n  logOut = async () => {\n    let res = await actions.logOut()\n    this.setUser({email:null, createdAt: null, updatedAt: null, _id: null }) //FIX \n  }\n\n  render(){\n\n    return (\n    <BrowserRouter>\n      {this.state.email}\n      <nav>\n        <NavLink to=\"/\">Home |</NavLink>\n  \n        {this.state.email ? \n          <Fragment>\n           <NavLink onClick={this.logOut} to='/'>Log Out |</NavLink> \n           <NavLink to=\"/profile\">Profile|</NavLink>\n           </Fragment>\n           :\n           <Fragment>\n           <NavLink to=\"/sign-up\">Sign Up |</NavLink>\n           <NavLink to=\"/log-in\">Log In |</NavLink>\n           </Fragment>\n          }\n        \n      </nav>\n      <Switch>\n        <Route exact path=\"/\" render={(props) => <Home {...props} />} />\n        <Route exact path=\"/sign-up\" render={(props)=><SignUp {...props} setUser={this.setUser} />} />\n        <Route exact path=\"/log-in\" render={(props) => <LogIn {...props} setUser={this.setUser}/>} />\n        <Route exact path=\"/profile\" render={(props) => <Profile {...props} user={this.state}/>} />\n        \n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}